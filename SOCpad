import platform
import tkinter
from tkinter import Tk, Button, Text, filedialog, Menu

red = "#FF0000"

v = platform.python_version()

if "2.7" in v:
    from Tkinter import *
else:
    from tkinter import *

root = Tk()
root.title("Harry's Text Editor")
root.geometry("800x600")  # https://root.cern/manual/python/

# {
Font_tuple = ("Comic Sans MS", 20, "bold")
text = Text(root, undo=True, autoseparators=True, maxundo=-1, font=Font_tuple)
text.pack(expand=True, fill='both')
# } Doesn't do anything, I think. ^^

def saveAs():
    global text
    t = text.get("1.0", "end-1c")
    savelocation = filedialog.asksaveasfilename(defaultextension=".txt",
                                                filetypes=[("Text files", "*.txt"),
                                                           ("All files", "*.*")])
    if savelocation:
        with open(savelocation, "w") as file1:
            file1.write(t)

def openFile():
    global text
    file = filedialog.askopenfile(defaultextension=".txt",
                                  filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
    if file:
        text.delete(1.0, END)
        text.insert(INSERT, file.read())

def undo_action(event=None):
    text.event_generate("<<Undo>>")

def redo_action(event=None):
    text.event_generate("<<Redo>>")

def save_action(event=None):
    saveAs()

def open_action(event=None):
    openFile()

def paste_action(event=None):
    try:
        text.event_generate("<<Paste>>")
        text.edit_separator()  # Mark
    except:
        pass

def copy_action(event=None):
    try:
        text.event_generate("<<Copy>>")
    except:
        pass

def cut_action(event=None):
    try:
        text.event_generate("<<Cut>>")
        text.edit_separator()  # Mark no2
    except:
        pass

# Key bindings for undo, redo, save, open, cut, copy, and paste
root.bind("<Control-z>", undo_action)  
root.bind("<Control-y>", redo_action)  
root.bind("<Control-s>", save_action)  
root.bind("<Control-o>", open_action)  
root.bind("<Control-x>", cut_action)   
root.bind("<Control-c>", copy_action)  
root.bind("<Control-v>", paste_action) 

menu = Menu(root)
root.config(menu=menu)

File_menu = Menu(menu)  # File menu
menu.add_cascade(label="File", menu=File_menu)

File_menu.add_command(label="Open", command=openFile)
File_menu.add_command(label="Save As", command=saveAs)

Edit_menu = Menu(menu, tearoff=0)  # Edit menu
menu.add_cascade(label="Edit", menu=Edit_menu)

font_menu = Menu(menu)  # Font menu
menu.add_cascade(label="Font", menu=font_menu)

def change_font(font_name):
    text.config(font=(font_name, 20))


font_menu.add_command(label="Helvetica", command=lambda: change_font("Helvetica"))
font_menu.add_command(label="Courier", command=lambda: change_font("Courier"))
font_menu.add_command(label="Comic Sans MS", command=lambda: change_font("Comic Sans MS"))
font_menu.add_command(label="Terminal", command=lambda: change_font("Terminal"))
font_menu.add_command(label="Eccentric Std", command=lambda: change_font("Eccentric Std"))
font_menu.add_command(label="Arabic Transparent", command=lambda: change_font("Arabic Transparent"))
font_menu.add_command(label="Rosewood Std Fill", command=lambda: change_font("Rosewood Std Fill"))
font_menu.add_command(label="Hobo Std", command=lambda: change_font("Hobo Std"))
font_menu.add_command(label="Cooper Std Black", command=lambda: change_font("Cooper Std Black"))
font_menu.add_command(label="MS Sans Serif", command=lambda: change_font("MS Sans Serif"))
font_menu.add_command(label="Trajan Pro", command=lambda: change_font("Trajan Pro"))
font_menu.add_command(label="LilyUPC", command=lambda: change_font("LilyUPC"))
font_menu.add_command(label="Great Vibes", command=lambda: change_font("Great Vibes"))
font_menu.add_command(label="Calibri Light", command=lambda: change_font("Calibri Light"))
font_menu.add_command(label="Wingdings 2", command=lambda: change_font("Wingdings 2"))

root.mainloop()
